name: tests
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  tests:
    env:
      TEST_IMG_OUTPUT_PATH: 'dist'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        py: ['3.7', '3.8', '3.9', '3.10']
        qt-lib: ['pyqt', 'pyside', 'none']
        include:
          - {py: '3.7', qt-lib: 'pyqt', qt: 'PyQt5'}
          - {py: '3.7', qt-lib: 'pyside', qt: 'PySide2'}
          - {py: '3.7', qt-lib: 'none', qt: 'none'}
          - {py: '3.8', qt-lib: 'pyqt', qt: 'PyQt5'}
          - {py: '3.8', qt-lib: 'pyside', qt: 'PySide6'}
          - {py: '3.8', qt-lib: 'none', qt: 'none'}
          - {py: '3.9', qt-lib: 'pyqt', qt: 'PyQt6'}
          - {py: '3.9', qt-lib: 'pyside', qt: 'PySide6'}
          - {py: '3.9', qt-lib: 'none', qt: 'none'}
          - {py: '3.10', qt-lib: 'pyqt', qt: 'PyQt6'}
          - {py: '3.10', qt-lib: 'pyside', qt: 'PySide6'}
          - {py: '3.10', qt-lib: 'none', qt: 'none'}
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} py-${{ matrix.py }} qt-${{ matrix.qt }}
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py }}

    - name: Get Poetry home path
      id: poetry-home
      run: |
        if [ ${{ runner.os }} == "ubuntu-latest" ]; then
          path="C:/Users/runneradmin/AppData/Roaming/Python/Scripts"
        else
          path="$HOME/.local/"
        fi
        echo ::set-output name=path::$path

    - name: Get full Python version
      id: full-py-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Cache ${{ steps.poetry-home.outputs.path }}
      id: cache-poetry
      uses: actions/cache@v2
      with:
        path: ${{ steps.poetry-home.outputs.path }}
        key: poetry-${{ runner.os }}-${{ steps.full-py-version.outputs.version }}

    - uses: snok/install-poetry@v1
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      with:
        virtualenvs-in-project: true
      env:
        POETRY_HOME: ${{ steps.poetry-home.outputs.path }}

    - name: Cache ./.venv
      id: cache-venv
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-py-version.outputs.version }}-${{ matrix.qt }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        # See https://github.com/python-poetry/poetry/issues/4524
        # poetry self update
        poetry install

    - name: Install Qt lib
      if: matrix.qt != 'none' && steps.cache-venv.outputs.cache-hit != 'true'
      run: poetry run pip install -U ${{ matrix.qt }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install --no-install-recommends -y libxkbcommon-x11-0 libopengl0 libyaml-dev libegl1-mesa libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0

    - name: Run pytest
      if: matrix.qt != 'none'
      run: poetry run pytest --cov -v tests --cov-report=term-missing --cov-report=xml

    - name: Run pytest without Qt lib
      if: matrix.qt == 'none'
      run: |
        poetry run pip uninstall -y pytest-qt
        poetry run pytest tests --cov -v --cov-report=term-missing --cov-report=xml --ignore=tests/test_widget_gallery.py -m "not available_qt"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Capture img of WidgetGallery
      if: matrix.qt != 'none'
      run: poetry run python ./.github/scripts/capture.py -i ${{runner.os}}-py${{matrix.py}}-${{matrix.qt}} -d ${{ env.TEST_IMG_OUTPUT_PATH}}

    - name: Archive img of WidgetGallery
      if: matrix.qt != 'none'
      uses: actions/upload-artifact@v2
      with:
        name: widget-img
        path: ./${{ env.TEST_IMG_OUTPUT_PATH}}/*.png
