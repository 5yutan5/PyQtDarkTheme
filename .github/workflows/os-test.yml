name: tests
on:
  push:
    paths:
      - "builder/**"
      - "qdarktheme/**"
      - ".gitmodules"
      - "poetry.lock"
      - "pyproject.toml"
      - ".github/scripts/capture.py"
      - ".github/workflows/os-test.yml"
      - "!**.md"
    branches:
      - master
  pull_request:
    paths:
      - "builder/**"
      - "qdarktheme/**"
      - ".gitmodules"
      - "poetry.lock"
      - "pyproject.toml"
      - ".github/scripts/capture.py"
      - ".github/workflows/os-test.yml"
      - "!**.md"

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        os: [ubuntu-latest, macOS-latest, windows-latest]
        qt-lib: [pyqt, pyside]
        include:
          - python-version: "3.7"
            qt-lib: "pyqt"
            qt-version: "PyQt5"
          - python-version: "3.7"
            qt-lib: "pyside"
            qt-version: "PySide2"
          - python-version: "3.8"
            qt-lib: "pyqt"
            qt-version: "PyQt5"
          - python-version: "3.8"
            qt-lib: "pyside"
            qt-version: "PySide6"
          - python-version: "3.9"
            qt-lib: "pyqt"
            qt-version: "PyQt6"
          - python-version: "3.9"
            qt-lib: "pyside"
            qt-version: "PySide6"
          - python-version: "3.10"
            qt-lib: "pyqt"
            qt-version: "PyQt6"
          - python-version: "3.10"
            qt-lib: "pyside"
            qt-version: "PySide6"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap poetry
      shell: bash
      run: curl -sL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -

    - name: Update PATH
      if: runner.os != 'Windows'
      shell: bash
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Update PATH for Windows
      if: runner.os == 'Windows'
      shell: bash
      run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

    - name: Configure poetry
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ matrix.qt-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install
        poetry run pip install -U ${{ matrix.qt-version }}

    - name: "Install Linux dependencies"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y libxkbcommon-x11-0 x11-utils libopengl0
        sudo apt-get install --no-install-recommends -y libyaml-dev libegl1-mesa libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0

    - name: Run pytest
      shell: bash
      run: poetry run pytest --cov -v tests --cov-report=term-missing --cov-report=xml

    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Capture theme images
      if: runner.os != 'Linux'
      run: poetry run python ./.github/scripts/capture.py ${{runner.os}}-py${{matrix.python-version}}-${{matrix.qt-version}}

    - name: Archive theme images
      if: runner.os != 'Linux'
      uses: actions/upload-artifact@v2
      with:
        name: widget-images
        path: ./*.jpg
        retention-days: 2
